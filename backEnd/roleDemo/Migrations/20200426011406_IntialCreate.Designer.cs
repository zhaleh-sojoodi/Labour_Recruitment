// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using labourRecruitment.Models.LabourRecruitment;

namespace labourRecruitment.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20200426011406_IntialCreate")]
    partial class IntialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Availability", b =>
                {
                    b.Property<int>("AvailabilityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("availability_id");

                    b.Property<string>("AvailabilityDay")
                        .HasColumnName("availability_day")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("AvailabilityId");

                    b.ToTable("Availability");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.AvailabilityLabourer", b =>
                {
                    b.Property<int>("AvailabilityLobourerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("availabilityLobourer_id");

                    b.Property<int?>("AvailabilityId")
                        .HasColumnName("availability_id");

                    b.Property<int?>("LabourerId")
                        .HasColumnName("labourer_id");

                    b.HasKey("AvailabilityLobourerId")
                        .HasName("PK__Availabi__786BC5121ECA2D32");

                    b.HasIndex("AvailabilityId");

                    b.HasIndex("LabourerId");

                    b.ToTable("AvailabilityLabourer");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("client_id");

                    b.Property<string>("ClientCity")
                        .HasColumnName("client_city")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("ClientDescription")
                        .HasColumnName("client_description")
                        .HasColumnType("text");

                    b.Property<string>("ClientEmail")
                        .HasColumnName("client_email")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ClientName")
                        .HasColumnName("client_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("ClientPhoneNumber")
                        .HasColumnName("client_phone_number")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("ClientState")
                        .HasColumnName("client_state")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("ClientId");

                    b.HasIndex("UserId");

                    b.ToTable("Client");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Incident", b =>
                {
                    b.Property<int>("IncidentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("incident_id");

                    b.Property<DateTime?>("IncidentDate")
                        .HasColumnName("incident_date")
                        .HasColumnType("date");

                    b.Property<string>("IncidentDescription")
                        .HasColumnName("incident_description")
                        .HasColumnType("text");

                    b.Property<string>("IncidentFile")
                        .HasColumnName("incident_file")
                        .HasMaxLength(150)
                        .IsUnicode(false);

                    b.Property<int?>("IncidentTypeId")
                        .HasColumnName("incident_type_id");

                    b.Property<int?>("JobId")
                        .HasColumnName("job_id");

                    b.Property<int?>("LabourerId")
                        .HasColumnName("labourer_id");

                    b.HasKey("IncidentId");

                    b.HasIndex("IncidentTypeId");

                    b.HasIndex("JobId");

                    b.HasIndex("LabourerId");

                    b.ToTable("Incident");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.IncidentType", b =>
                {
                    b.Property<int>("IncidentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("incident_type_id");

                    b.Property<string>("IncidentTypeName")
                        .HasColumnName("incident_type_name")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("IncidentTypeId");

                    b.ToTable("IncidentType");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Job", b =>
                {
                    b.Property<int>("JobId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("job_id");

                    b.Property<string>("City")
                        .HasColumnName("city")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("ClientId")
                        .HasColumnName("client_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnName("end_date")
                        .HasColumnType("date");

                    b.Property<bool?>("InProgress")
                        .HasColumnName("inProgress");

                    b.Property<bool?>("IsComplete")
                        .HasColumnName("isComplete");

                    b.Property<string>("JobDescription")
                        .HasColumnName("job_description")
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .HasColumnName("postal_code")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("StartDate")
                        .HasColumnName("start_date")
                        .HasColumnType("date");

                    b.Property<string>("State")
                        .HasColumnName("state")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Street")
                        .HasColumnName("street")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Title")
                        .HasColumnName("title")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("TotalHired")
                        .HasColumnName("total_hired");

                    b.HasKey("JobId");

                    b.HasIndex("ClientId");

                    b.ToTable("Job");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.JobLabourer", b =>
                {
                    b.Property<int>("JobLabourerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("job_labourer_id");

                    b.Property<double?>("ClientQualityRating")
                        .HasColumnName("client_quality_rating");

                    b.Property<int?>("JobId")
                        .HasColumnName("job_id");

                    b.Property<int?>("LabourerId")
                        .HasColumnName("labourer_id");

                    b.Property<double?>("LabourerSafetyRating")
                        .HasColumnName("labourer_safety_rating");

                    b.Property<bool?>("SafetyMeetingCompleted")
                        .HasColumnName("safety_meeting_completed");

                    b.Property<int?>("SkillId")
                        .HasColumnName("skill_id");

                    b.HasKey("JobLabourerId");

                    b.HasIndex("JobId");

                    b.HasIndex("LabourerId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobLabourer");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.JobSkill", b =>
                {
                    b.Property<int>("JobSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("job_skill_id");

                    b.Property<int?>("JobId")
                        .HasColumnName("job_id");

                    b.Property<int?>("NumberNeeded")
                        .HasColumnName("number_needed");

                    b.Property<int?>("SkillId")
                        .HasColumnName("skill_id");

                    b.HasKey("JobSkillId");

                    b.HasIndex("JobId");

                    b.HasIndex("SkillId");

                    b.ToTable("JobSkill");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Labourer", b =>
                {
                    b.Property<int>("LabourerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("labourer_id");

                    b.Property<bool?>("IsAvailable")
                        .HasColumnName("isAvailable");

                    b.Property<string>("LabourerEmail")
                        .HasColumnName("labourer_email")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("LabourerFirstName")
                        .HasColumnName("labourer_first_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("LabourerLastName")
                        .HasColumnName("labourer_last_name")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("LabourerSin")
                        .HasColumnName("labourer_SIN");

                    b.Property<int?>("UserId")
                        .HasColumnName("user_id");

                    b.HasKey("LabourerId");

                    b.HasIndex("UserId");

                    b.ToTable("Labourer");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.LabourerAttendance", b =>
                {
                    b.Property<int>("LabourerAttendanceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("labourer_attendance_id");

                    b.Property<double?>("DailyQualityRating")
                        .HasColumnName("daily_quality_rating");

                    b.Property<DateTime?>("Date")
                        .HasColumnName("date")
                        .HasColumnType("date");

                    b.Property<int?>("JobId")
                        .HasColumnName("job_id");

                    b.Property<int?>("LabourerId")
                        .HasColumnName("labourer_id");

                    b.HasKey("LabourerAttendanceId");

                    b.HasIndex("JobId");

                    b.HasIndex("LabourerId");

                    b.ToTable("LabourerAttendance");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.LabourerSkill", b =>
                {
                    b.Property<int>("LabourerSkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("labourer_skill_id");

                    b.Property<int?>("LabourerId")
                        .HasColumnName("labourer_id");

                    b.Property<int?>("SkillId")
                        .HasColumnName("skill_id");

                    b.HasKey("LabourerSkillId");

                    b.HasIndex("LabourerId");

                    b.HasIndex("SkillId");

                    b.ToTable("LabourerSkill");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Skill", b =>
                {
                    b.Property<int>("SkillId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("skill_id");

                    b.Property<decimal?>("AdminReceives")
                        .HasColumnName("admin_receives")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<decimal?>("LabourerReceives")
                        .HasColumnName("labourer_receives")
                        .HasColumnType("decimal(18, 0)");

                    b.Property<string>("SkillName")
                        .HasColumnName("skill_name")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("SkillId");

                    b.ToTable("Skill");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.SystemUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("user_id");

                    b.Property<string>("Email")
                        .HasColumnName("email")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnName("password")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("Role")
                        .HasColumnName("role")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("UserId")
                        .HasName("PK__SystemUs__B9BE370FB1BB96B6");

                    b.ToTable("SystemUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.AvailabilityLabourer", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Availability", "Availability")
                        .WithMany("AvailabilityLabourer")
                        .HasForeignKey("AvailabilityId")
                        .HasConstraintName("FK__Availabil__avail__2F10007B");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Labourer", "Labourer")
                        .WithMany("AvailabilityLabourer")
                        .HasForeignKey("LabourerId")
                        .HasConstraintName("FK__Availabil__labou__2E1BDC42");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Client", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.SystemUser", "User")
                        .WithMany("Client")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Client__user_id__267ABA7A");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Incident", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.IncidentType", "IncidentType")
                        .WithMany("Incident")
                        .HasForeignKey("IncidentTypeId")
                        .HasConstraintName("FK__Incident__incide__3E52440B");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Job", "Job")
                        .WithMany("Incident")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__Incident__job_id__3C69FB99");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Labourer", "Labourer")
                        .WithMany("Incident")
                        .HasForeignKey("LabourerId")
                        .HasConstraintName("FK__Incident__labour__3D5E1FD2");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Job", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Client", "Client")
                        .WithMany("Job")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__Job__client_id__31EC6D26");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.JobLabourer", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Job", "Job")
                        .WithMany("JobLabourer")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__JobLabour__job_i__48CFD27E");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Labourer", "Labourer")
                        .WithMany("JobLabourer")
                        .HasForeignKey("LabourerId")
                        .HasConstraintName("FK__JobLabour__labou__49C3F6B7");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Skill", "Skill")
                        .WithMany("JobLabourer")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK__JobLabour__skill__5535A963");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.JobSkill", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Job", "Job")
                        .WithMany("JobSkill")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__JobSkill__job_id__412EB0B6");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Skill", "Skill")
                        .WithMany("JobSkill")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK__JobSkill__skill___4222D4EF");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.Labourer", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.SystemUser", "User")
                        .WithMany("Labourer")
                        .HasForeignKey("UserId")
                        .HasConstraintName("FK__Labourer__user_i__29572725");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.LabourerAttendance", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Job", "Job")
                        .WithMany("LabourerAttendance")
                        .HasForeignKey("JobId")
                        .HasConstraintName("FK__LabourerA__job_i__36B12243");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Labourer", "Labourer")
                        .WithMany("LabourerAttendance")
                        .HasForeignKey("LabourerId")
                        .HasConstraintName("FK__LabourerA__labou__37A5467C");
                });

            modelBuilder.Entity("labourRecruitment.Models.LabourRecruitment.LabourerSkill", b =>
                {
                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Labourer", "Labourer")
                        .WithMany("LabourerSkill")
                        .HasForeignKey("LabourerId")
                        .HasConstraintName("FK__LabourerS__labou__44FF419A");

                    b.HasOne("labourRecruitment.Models.LabourRecruitment.Skill", "Skill")
                        .WithMany("LabourerSkill")
                        .HasForeignKey("SkillId")
                        .HasConstraintName("FK__LabourerS__skill__45F365D3");
                });
#pragma warning restore 612, 618
        }
    }
}
